// <auto-generated />
using System;
using MNV.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MNV.Database.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210420125450_UpdateRelationOfEmployeeAndUser")]
    partial class UpdateRelationOfEmployeeAndUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MNV.Domain.Entities.Department", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Active");

                    b.Property<long?>("CreatedByID")
                        .HasColumnType("bigint")
                        .HasColumnName("CreatedByID");

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2021, 4, 20, 20, 54, 49, 889, DateTimeKind.Unspecified).AddTicks(7721), new TimeSpan(0, 8, 0, 0, 0)))
                        .HasColumnName("DateCreated");

                    b.Property<DateTimeOffset?>("DateModified")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("DateModified");

                    b.Property<Guid>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(new Guid("ec5bc007-d13f-4f46-ba90-14c484c95e7d"))
                        .HasColumnName("Key");

                    b.Property<long?>("ModifiedByID")
                        .HasColumnType("bigint")
                        .HasColumnName("ModifiedByID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.HasKey("ID");

                    b.ToTable("Department", "dbo");

                    b.HasData(
                        new
                        {
                            ID = 1L,
                            Active = true,
                            DateCreated = new DateTimeOffset(new DateTime(2021, 4, 20, 20, 54, 49, 918, DateTimeKind.Unspecified).AddTicks(111), new TimeSpan(0, 8, 0, 0, 0)),
                            Key = new Guid("2b7d30d0-8dc0-4343-9275-860e3959472e"),
                            Name = "IT - Corporate Applications"
                        },
                        new
                        {
                            ID = 2L,
                            Active = true,
                            DateCreated = new DateTimeOffset(new DateTime(2021, 4, 20, 20, 54, 49, 918, DateTimeKind.Unspecified).AddTicks(165), new TimeSpan(0, 8, 0, 0, 0)),
                            Key = new Guid("80b24d7b-8873-4e04-9b91-9fb70c07aacf"),
                            Name = "IT - Information Security"
                        },
                        new
                        {
                            ID = 3L,
                            Active = true,
                            DateCreated = new DateTimeOffset(new DateTime(2021, 4, 20, 20, 54, 49, 918, DateTimeKind.Unspecified).AddTicks(168), new TimeSpan(0, 8, 0, 0, 0)),
                            Key = new Guid("a6f8787f-7701-4aa8-b877-4ed80eb1c4b3"),
                            Name = "IT - Information Access Management"
                        });
                });

            modelBuilder.Entity("MNV.Domain.Entities.Employee", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Active");

                    b.Property<long?>("CreatedByID")
                        .HasColumnType("bigint")
                        .HasColumnName("CreatedByID");

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2021, 4, 20, 20, 54, 49, 895, DateTimeKind.Unspecified).AddTicks(7745), new TimeSpan(0, 8, 0, 0, 0)))
                        .HasColumnName("DateCreated");

                    b.Property<DateTimeOffset?>("DateModified")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("DateModified");

                    b.Property<long>("DepartmentID")
                        .HasColumnType("bigint")
                        .HasColumnName("DepartmentID");

                    b.Property<string>("EmployeeID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EmployeeID");

                    b.Property<Guid>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(new Guid("c0847c04-5d3c-4341-8036-1ef80f252a6c"))
                        .HasColumnName("Key");

                    b.Property<long?>("ModifiedByID")
                        .HasColumnType("bigint")
                        .HasColumnName("ModifiedByID");

                    b.Property<string>("PhotoFileName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("PhotoFileName");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("StartDate");

                    b.Property<long>("UserID")
                        .HasColumnType("bigint")
                        .HasColumnName("UserID");

                    b.HasKey("ID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Employee", "dbo");

                    b.HasData(
                        new
                        {
                            ID = 1L,
                            Active = true,
                            DateCreated = new DateTimeOffset(new DateTime(2021, 4, 20, 20, 54, 49, 918, DateTimeKind.Unspecified).AddTicks(6637), new TimeSpan(0, 8, 0, 0, 0)),
                            DepartmentID = 1L,
                            EmployeeID = "200117645",
                            Key = new Guid("2b7d30d0-8dc0-4343-9275-860e3959472e"),
                            PhotoFileName = "anonymous.png",
                            StartDate = new DateTimeOffset(new DateTime(2021, 4, 20, 20, 54, 49, 918, DateTimeKind.Unspecified).AddTicks(6132), new TimeSpan(0, 8, 0, 0, 0)),
                            UserID = 1L
                        },
                        new
                        {
                            ID = 2L,
                            Active = true,
                            DateCreated = new DateTimeOffset(new DateTime(2021, 4, 20, 20, 54, 49, 918, DateTimeKind.Unspecified).AddTicks(6704), new TimeSpan(0, 8, 0, 0, 0)),
                            DepartmentID = 2L,
                            EmployeeID = "200117646",
                            Key = new Guid("80b24d7b-8873-4e04-9b91-9fb70c07aacf"),
                            PhotoFileName = "anonymous.png",
                            StartDate = new DateTimeOffset(new DateTime(2021, 4, 20, 20, 54, 49, 918, DateTimeKind.Unspecified).AddTicks(6697), new TimeSpan(0, 8, 0, 0, 0)),
                            UserID = 2L
                        },
                        new
                        {
                            ID = 3L,
                            Active = true,
                            DateCreated = new DateTimeOffset(new DateTime(2021, 4, 20, 20, 54, 49, 918, DateTimeKind.Unspecified).AddTicks(6708), new TimeSpan(0, 8, 0, 0, 0)),
                            DepartmentID = 3L,
                            EmployeeID = "200117647",
                            Key = new Guid("a6f8787f-7701-4aa8-b877-4ed80eb1c4b3"),
                            PhotoFileName = "anonymous.png",
                            StartDate = new DateTimeOffset(new DateTime(2021, 4, 20, 20, 54, 49, 918, DateTimeKind.Unspecified).AddTicks(6707), new TimeSpan(0, 8, 0, 0, 0)),
                            UserID = 3L
                        });
                });

            modelBuilder.Entity("MNV.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("RefreshToken", "dbo");
                });

            modelBuilder.Entity("MNV.Domain.Entities.Role", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Active");

                    b.Property<long?>("CreatedByID")
                        .HasColumnType("bigint")
                        .HasColumnName("CreatedByID");

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2021, 4, 20, 20, 54, 49, 905, DateTimeKind.Unspecified).AddTicks(6562), new TimeSpan(0, 8, 0, 0, 0)))
                        .HasColumnName("DateCreated");

                    b.Property<DateTimeOffset?>("DateModified")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("DateModified");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(new Guid("a9f27937-8b38-4951-b9f7-6d0beae07b25"))
                        .HasColumnName("Key");

                    b.Property<long?>("ModifiedByID")
                        .HasColumnType("bigint")
                        .HasColumnName("ModifiedByID");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Role", "dbo");

                    b.HasData(
                        new
                        {
                            ID = 1L,
                            Active = true,
                            DateCreated = new DateTimeOffset(new DateTime(2021, 4, 20, 20, 54, 49, 915, DateTimeKind.Unspecified).AddTicks(600), new TimeSpan(0, 8, 0, 0, 0)),
                            Description = "Super Administrator",
                            Key = new Guid("2b7d30d0-8dc0-4343-9275-860e3959472e"),
                            Name = "Superadmin"
                        },
                        new
                        {
                            ID = 2L,
                            Active = true,
                            DateCreated = new DateTimeOffset(new DateTime(2021, 4, 20, 20, 54, 49, 915, DateTimeKind.Unspecified).AddTicks(1173), new TimeSpan(0, 8, 0, 0, 0)),
                            Description = "Administrator",
                            Key = new Guid("80b24d7b-8873-4e04-9b91-9fb70c07aacf"),
                            Name = "Administrator"
                        },
                        new
                        {
                            ID = 3L,
                            Active = true,
                            DateCreated = new DateTimeOffset(new DateTime(2021, 4, 20, 20, 54, 49, 915, DateTimeKind.Unspecified).AddTicks(1191), new TimeSpan(0, 8, 0, 0, 0)),
                            Description = "Guest",
                            Key = new Guid("e2a7b30a-face-4aea-ae6e-af57b2634daa"),
                            Name = "Guest"
                        });
                });

            modelBuilder.Entity("MNV.Domain.Entities.User", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Active");

                    b.Property<long?>("CreatedByID")
                        .HasColumnType("bigint")
                        .HasColumnName("CreatedByID");

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2021, 4, 20, 20, 54, 49, 910, DateTimeKind.Unspecified).AddTicks(8070), new TimeSpan(0, 8, 0, 0, 0)))
                        .HasColumnName("DateCreated");

                    b.Property<DateTimeOffset?>("DateModified")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("DateModified");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("FirstName");

                    b.Property<Guid>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(new Guid("20b4b7d5-0c26-4914-a81d-1998ad793767"))
                        .HasColumnName("Key");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("LastName");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ModifiedByID")
                        .HasColumnType("bigint")
                        .HasColumnName("ModifiedByID");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Username");

                    b.HasKey("ID");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("User", "dbo");

                    b.HasData(
                        new
                        {
                            ID = 1L,
                            Active = true,
                            CreatedByID = 1L,
                            DateCreated = new DateTimeOffset(new DateTime(2021, 4, 20, 20, 54, 49, 917, DateTimeKind.Unspecified).AddTicks(1673), new TimeSpan(0, 8, 0, 0, 0)),
                            Email = "mcnielv@gmail.com",
                            FirstName = "McNiel",
                            Key = new Guid("2b7d30d0-8dc0-4343-9275-860e3959472e"),
                            LastName = "Viray",
                            MiddleName = "N",
                            Password = "Jaemp2W0c4pSRQ8SMICEvg==",
                            Username = "mcnielv@gmail.com"
                        },
                        new
                        {
                            ID = 2L,
                            Active = true,
                            CreatedByID = 1L,
                            DateCreated = new DateTimeOffset(new DateTime(2021, 4, 20, 20, 54, 49, 917, DateTimeKind.Unspecified).AddTicks(1784), new TimeSpan(0, 8, 0, 0, 0)),
                            Email = "rdiazy@email.com",
                            FirstName = "Romy",
                            Key = new Guid("80b24d7b-8873-4e04-9b91-9fb70c07aacf"),
                            LastName = "Diaz",
                            MiddleName = "B",
                            Password = "Jaemp2W0c4pSRQ8SMICEvg==",
                            Username = "rdiazy@email.com"
                        },
                        new
                        {
                            ID = 3L,
                            Active = true,
                            CreatedByID = 1L,
                            DateCreated = new DateTimeOffset(new DateTime(2021, 4, 20, 20, 54, 49, 917, DateTimeKind.Unspecified).AddTicks(1788), new TimeSpan(0, 8, 0, 0, 0)),
                            Email = "pdiaz@email.com",
                            FirstName = "Pacquito",
                            Key = new Guid("a6f8787f-7701-4aa8-b877-4ed80eb1c4b3"),
                            LastName = "Diaz",
                            MiddleName = "B",
                            Password = "Jaemp2W0c4pSRQ8SMICEvg==",
                            Username = "pdiaz@email.com"
                        });
                });

            modelBuilder.Entity("MNV.Domain.Entities.UserRole", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Active");

                    b.Property<long?>("CreatedByID")
                        .HasColumnType("bigint")
                        .HasColumnName("CreatedByID");

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2021, 4, 20, 20, 54, 49, 913, DateTimeKind.Unspecified).AddTicks(2893), new TimeSpan(0, 8, 0, 0, 0)))
                        .HasColumnName("DateCreated");

                    b.Property<DateTimeOffset?>("DateModified")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("DateModified");

                    b.Property<Guid>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(new Guid("d2c24240-608c-42a2-ab16-d2072e702480"))
                        .HasColumnName("Key");

                    b.Property<long?>("ModifiedByID")
                        .HasColumnType("bigint")
                        .HasColumnName("ModifiedByID");

                    b.Property<long>("RoleID")
                        .HasColumnType("bigint")
                        .HasColumnName("RoleID");

                    b.Property<long>("UserID")
                        .HasColumnType("bigint")
                        .HasColumnName("UserID");

                    b.HasKey("ID");

                    b.HasIndex("RoleID");

                    b.HasIndex("UserID");

                    b.ToTable("UserRole", "dbo");

                    b.HasData(
                        new
                        {
                            ID = 1L,
                            Active = true,
                            DateCreated = new DateTimeOffset(new DateTime(2021, 4, 20, 20, 54, 49, 917, DateTimeKind.Unspecified).AddTicks(6349), new TimeSpan(0, 8, 0, 0, 0)),
                            Key = new Guid("2b7d30d0-8dc0-4343-9275-860e3959472e"),
                            RoleID = 1L,
                            UserID = 1L
                        },
                        new
                        {
                            ID = 2L,
                            Active = true,
                            DateCreated = new DateTimeOffset(new DateTime(2021, 4, 20, 20, 54, 49, 917, DateTimeKind.Unspecified).AddTicks(6403), new TimeSpan(0, 8, 0, 0, 0)),
                            Key = new Guid("80b24d7b-8873-4e04-9b91-9fb70c07aacf"),
                            RoleID = 3L,
                            UserID = 2L
                        },
                        new
                        {
                            ID = 3L,
                            Active = true,
                            DateCreated = new DateTimeOffset(new DateTime(2021, 4, 20, 20, 54, 49, 917, DateTimeKind.Unspecified).AddTicks(6405), new TimeSpan(0, 8, 0, 0, 0)),
                            Key = new Guid("a6f8787f-7701-4aa8-b877-4ed80eb1c4b3"),
                            RoleID = 2L,
                            UserID = 3L
                        });
                });

            modelBuilder.Entity("MNV.Domain.Entities.Employee", b =>
                {
                    b.HasOne("MNV.Domain.Entities.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MNV.Domain.Entities.User", "User")
                        .WithOne("Employee")
                        .HasForeignKey("MNV.Domain.Entities.Employee", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MNV.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("MNV.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MNV.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("MNV.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MNV.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MNV.Domain.Entities.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("MNV.Domain.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("MNV.Domain.Entities.User", b =>
                {
                    b.Navigation("Employee");

                    b.Navigation("RefreshTokens");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
